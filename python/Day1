#Q1:Effective brackets
class Solution(object):
    def isValid(self, s):
        d = {')': '(', '}': '{', ']': '['}
        stack = []
        for char in s:
            if char in '({[':
                stack.append(char)
            elif char in ')}]':
                if not stack:
                    return False
                else:
                    if stack.pop() != d[char]:
                        return False
        if stack: 
            return False
        else:
            return True
s = '(()'
print(Solution().isValid(s))

#Q2:Generate the parentheses
class Solution(object):
    def generate(self, n):
        ans = []
        def backtrack(S = '', left = 0, right = 0):
            if len(S) == 2 * n:
                ans.append(S)
                return
            if left < n:
                backtrack(S+'(', left+1, right)
            if right < left:
                backtrack(S+')', left, right+1)

        backtrack()
        return ans


a = Solution()
print(a.generate(3))

#Q3:the longest valid bracket
#solution 1--Stack
class Solution(object):
    def longestValidParentheses(self, s):
        tl = len(s)
        stack = []
        st = 0
        maxlen = 0
        for i in range(tl):
            # If it's an open bracket, it goes straight into the stack
            if s[i] == '(':
                stack.append(i)
            else:
                # If there are no pairs of elements in the stack, the valid parenthesis ends and the starting position is updated
                if len(stack) == 0:
                    st = i + 1
                    continue
                # There are pairs of elements
                else:
                    a = stack.pop()
                    # Pop a pair of left parenthesis
                    # If it is gone, there is no guarantee that the valid parenthesis will not continue, 
                    #so update the maxlen based on the current maximum distance
                    if len(stack) == 0:
                        maxlen = max(i - st + 1, maxlen)
                    # If still available at this point, calculate the length by subtracting the index from the top of the stack
                    else:
                        maxlen = max(i - stack[-1], maxlen)

        return maxlen

#Solution2--DP
class Solution:
    def longestValidParentheses(self, s):
        a = len(s)
        if a < 2:
            return 0
        maxlen = 0
        # dp [i] indicates the longest parenthesis length just before s[i] (including s[i])
        # if s[i] = '(', dp[i] = 0
        dp = [0 for _ in range(a)]
        for i in range(1, a):
            # Index of the current point of symmetry of I
            pos = i - 1 - dp[i - 1]
            if s[i] == ')' and s[i - 1] == '(' and i - 2 >= 0:
                # Is equal to the longest of the previous terms plus 2
                dp[i] = dp[i - 2] + 2
            elif s[i] == ')' and pos >= 0 and s[pos] == '(':
                #Is equal to our last point of symmetry plus 2
                dp[i] = dp[i - 1] + 2
                if pos - 1 >= 0:
                    # If you have a length before the point of symmetry, you add that length
                    dp[i] += dp[i - dp[i - 1] - 2]
        return max(dp)
        
#Q4: replace space
#Solution1:special
class Solution:
   # S source string
   def replaceSpace(self, s):
       res = ''
       for i in s:
           if i == ' ':
               res += '%20'
           else:
               res += i
       return res
#Solution2:common
class Solution(object):
    def replaceSpace(self, s):
        # write code here
        # second solution
        p1 = len(s) - 1
        res = list(s)
        n = s.count(' ')
        res += [0] * n * 2
        p2 = len(res) - 1
        while p1 != p2:
            if res[p1] == ' ':
                res[p2] = '0'
                res[p2 - 1] = '2'
                res[p2 - 2] = '%'
                p2 -= 3
            else:
                res[p2] = res[p1]
                p2 -= 1
            p1 -= 1
        return ''.join(res)

solution = Solution()
Str = "We Are Happy"
mystr = solution.replaceSpace(Str)
print(mystr)

#Q5 pandas' basis1
#(1)How to import pandas and view the version
pip install pandas
import pandas as pd
print(pd.__version__)
print(pd.show_versions)

#(2)How to join two series head to tail
import pandas as pd
pd.concat([df1,df2],axis=0)

#(3)How do I find elements that are in seriesA and not in seriesB
improt pandas as pd
ser1=pd.Series([1,2,3,4,5])
ser2=pd.Series([4,5,6,7,8])
ser1[~ser1.isin(ser2)]
